
#ifndef _Basic_Basic_h
#define _Basic_Basic_h


/*
   Basic.h -- part of the Basic project.
   Declarations for everything that was generated...
   Pat Deegan
   Psychogenic http://devicedruid.com

   Copyright (C) 2017 Pat Deegan

   Generated by DruidBuilder [https://devicedruid.com/],
   as part of project "a0883ee49bc54e8cbaab40d0f94ce1756TXZKE4vNm",
   aka Basic.

   Druid4Arduino, Device Druid, Druid Builder, the builder
   code brewery and its wizards, SerialUI and supporting
   libraries, as well as the generated parts of this program
   are
              Copyright (C) 2013-2017 Pat Deegan
   [http://psychogenic.com/ | http://flyingcarsandstuff.com/]
   and distributed under the terms of their respective licenses.
   See http://devicedruid.com for details.


   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
   PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
   YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
   CORRECTION.

   Keep in mind that there is no warranty and you are solely
   responsible for the use of all these cool tools.

   Play safe, have fun.

*/



/* we need the SerialUI lib */
#include <SerialUI.h>


/* MySUI
   Our SerialUI Instance, through which we can send/receive
   data from users.
*/
extern SUI::SerialUI MySUI;



/* NOTE: The containers used for tracking and input variables are,
    in this case, pretty much overkill...

    But this code was generated by builder, so I'm leaving it as-is,
    cause I'm lazy.

*/


/*
   The container for MyInputs, which
   holds all the variables for the various inputs.
*/
typedef struct MyInputsContainerStruct {

  long int Custom;
  // constructor to set sane startup vals
  MyInputsContainerStruct() :
    Custom(0)
  {}
} MyInputsContainerSt;

extern MyInputsContainerSt MyInputs;


/* MyTracked
   A structure to hold the tracked variables, which will
   automatically update the druid UI when modified by this
   program.
*/
typedef struct MyTrackedVarsContainerStruct {

  unsigned long ClickCount;
  // constructor to set sane startup vals
  MyTrackedVarsContainerStruct() :
    ClickCount(0)
  {}
} MyTrackedVarsContainerSt;

extern MyTrackedVarsContainerSt MyTracked;




/* ********* callbacks and validation functions ********* */



/* *** Main *** */
namespace Main {

void doDetails();

void doIncrementClicks();



/* *** Main -> Manage *** */
namespace Manage {

void doReset();

bool CustomIsOk(long int& newVal);

void CustomChanged();

} /* namespace Manage */

} /* namespace Main */



/* ***** SetupSerialUI: where we'll be setting up menus and such **** */
bool SetupSerialUI();


#define DIE_HORRIBLY(msg)	for(;;){ MySUI.println(msg); delay(1000); }


#endif
